# Stage 03 Trigger Detection
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

import sys
utils_path = os.path.join('..', 'scripts')
sys.path.append(os.path.join(os.getcwd(), '..'))
sys.path.append(utils_path)

from settings import output_path
from utils import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage02_processing',
                               'processed_data.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

DETECTION_BLOCK = config["DETECTION_BLOCK"]
TRIGGER_FILTER = config["TRIGGER_FILTER"]

THRESHOLD_METHOD = config["THRESHOLD_METHOD"]
FIXED_THRESHOLD = config["FIXED_THRESHOLD"]
FIT_FUNCTION = config["FIT_FUNCTION"]
BIN_NUM = config["BIN_NUM"]
SIGMA_FACTOR = config["SIGMA_FACTOR"]
TRANSITION_PHASE = config["TRANSITION_PHASE"]

MINIMA_ORDER = config["MINIMA_ORDER"]
USE_QUADRATIC_INTERPOLATION = config["USE_QUADRATIC_INTERPOLATION"]
NUM_INTERPOLATION_POINTS = config["NUM_INTERPOLATION_POINTS"]
MIN_PEAK_DISTANCE = config["MIN_PEAK_DISTANCE"]
THRESHOLD_FRACTION = config["THRESHOLD_FRACTION"]

MIN_UP_DURATION = config["MIN_UP_DURATION"]
MIN_DOWN_DURATION = config["MIN_DOWN_DURATION"]
REMOVE_DOWN_FIRST = config["REMOVE_DOWN_FIRST"]

#### Housekeeping ####
def locate(str_list, string):
    if string in str_list:
        return [i for i, el in enumerate(str_list) if el == string][0]
    else:
        raise ValueError("Can't find rule '{}'! Please check the spelling \
                          and the config file.".format(string))

def filtered_triggers(wildcards):
    rule_list = TRIGGER_FILTER
    default_input = os.path.join(OUTPUT_DIR, DETECTION_BLOCK,
                                 'transitions.'+NEO_FORMAT),
    if hasattr(wildcards, 'rule_name'):
        idx = locate(rule_list, wildcards.rule_name)
        if idx:
            return os.path.join(OUTPUT_DIR, rule_list[idx-1],
                                rule_list[idx-1]+'.'+NEO_FORMAT)
    elif len(rule_list):
        return os.path.join(OUTPUT_DIR, rule_list[-1],
                            rule_list[-1]+'.'+NEO_FORMAT)
    return default_input

wildcard_constraints:
    file_name = '\w+',
    rule_name = '\w+'

localrules: all, check_input

#### UTILTY BLOCKS ####

rule all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        # configfile = os.path.join('configs', f'config_{PROFILE}.yaml'),
        data = filtered_triggers,
        img = os.path.join(OUTPUT_DIR, 'plot_trigger_times')
    params:
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT)
    shell:
        """
        {params.command} "{input.data}" "{output.data}"
        """

rule check_input:
    priority: 10
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}"
        touch "{output}"
        """

checkpoint plot_trigger_times:
    input:
        data = filtered_triggers,
        plot_script = os.path.join('scripts', 'plot_trigger_times.py')
    params:
        tstart = PLOT_TSTART,
        tstop = PLOT_TSTOP,
        plot_channels = PLOT_CHANNELS,
        filename = 'trigger_times_channel0'+PLOT_FORMAT
    output:
        img_dir = report(directory(os.path.join(OUTPUT_DIR, 'plot_trigger_times')),
                         patterns=["{img_name}."+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python {input.plot_script} --data "{input.data}" \
                                   --output_dir "{output.img_dir}" \
                                   --filename {params.filename} \
                                   --t_start {params.tstart} \
                                   --t_stop {params.tstop} \
                                   --channels {params.plot_channels} \
        """

#### DETECTION BLOCKS (choose one) ####

rule threshold:
    input:
        data = STAGE_INPUT,
        thresholds = os.path.join('{dir}', 'threshold',
                                  f'{THRESHOLD_METHOD}_thresholds.npy'),
        script = os.path.join('scripts', 'threshold.py')
    output:
        data = os.path.join('{dir}', 'threshold', 'transitions.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --thresholds "{input.thresholds}"
        """

rule calc_tresholds_fixed:
# sub-rule of threshold
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'calc_thresholds_fixed.py')
    params:
        threshold = FIXED_THRESHOLD
    output:
        array = os.path.join('{dir}', 'threshold', 'fixed_thresholds.npy')
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.array}" \
                              --threshold {params.threshold}
        """

rule calc_tresholds_fitted:
# sub-rule of threshold
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'calc_thresholds_fitted.py')
    params:
        sigma_factor = SIGMA_FACTOR,
        fit_function = FIT_FUNCTION,
        bin_num = BIN_NUM,
        plot_channels = PLOT_CHANNELS,
        img_name = 'amplitudes_channel0.'+PLOT_FORMAT
    output:
        array = os.path.join('{dir}', 'threshold', 'fitted_thresholds.npy'),
        img_dir = report(directory(os.path.join('{dir}', 'threshold',
                                                'fitted_thresholds')),
                        patterns=["{img_name}."+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.array}" \
                              --img_dir "{output.img_dir}" \
                              --img_name {params.img_name} \
                              --sigma_factor {params.sigma_factor} \
                              --fit_function {params.fit_function} \
                              --bin_num {params.bin_num} \
                              --plot_channels {params.plot_channels}
        """

rule hilbert_phase:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'hilbert_phase.py')
    params:
        transition_phase = TRANSITION_PHASE,
        plot_channels = PLOT_CHANNELS,
        plot_tstart = PLOT_TSTART,
        plot_tstop = PLOT_TSTOP,
        img_name = 'hilbert_phase_channel0.'+PLOT_FORMAT
    output:
        data = os.path.join('{dir}', 'hilbert_phase', 'transitions.'+NEO_FORMAT),
        img_dir = report(directory(os.path.join('{dir}', 'hilbert_phase',
                                                'hilbert_phase_plots')),
                        patterns=['{img_name}.'+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --img_dir "{output.img_dir}" \
                              --img_name {params.img_name} \
                              --transition_phase {params.transition_phase} \
                              --plot_channels {params.plot_channels} \
                              --plot_tstart {params.plot_tstart} \
                              --plot_tstop {params.plot_tstop}
        """

rule minima:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'minima.py')
    params:
        order = MINIMA_ORDER,
	min_peak_distance = MIN_PEAK_DISTANCE,
        threshold_fraction = THRESHOLD_FRACTION,
	num_interpolation_points = NUM_INTERPOLATION_POINTS,
        use_quadtratic_interpolation = USE_QUADRATIC_INTERPOLATION,
    output:
        data = os.path.join('{dir}', 'minima', 'transitions.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --order {params.order} \
                              --min_peak_distance {params.min_peak_distance} \
                              --threshold_fraction {params.threshold_fraction} \
                              --use_quadtratic_interpolation {params.use_quadtratic_interpolation} \
                              --num_interpolation_points {params.num_interpolation_points} 
        """

#### FILTER BLOCKS (choose any) ####

rule remove_short_states:
    input:
        data = filtered_triggers,
        script = os.path.join('scripts', 'remove_short_states.py')
    params:
        min_up_duration = MIN_UP_DURATION,
        min_down_duration = MIN_DOWN_DURATION,
        remove_down_first = REMOVE_DOWN_FIRST
    output:
        data = os.path.join('{dir}', '{rule_name}',
                            'remove_short_states.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --min_up_duration {params.min_up_duration} \
                              --min_down_duration {params.min_down_duration} \
                              --remove_down_first {params.remove_down_first} \
        """
